setwd("~/Desktop/Spring2024/DIY/Data/kallistoout")
setRepositories()
install.packages("rhdf5")
install.packages(c("tidyverse", "tximport", "ensembldb", "EnsDb.Hsapiens.v86", "beepr"))
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
setRepositories()
install.packages(c("rhdf5", "tidyverse", "tximport", "ensembldb", "EnsDb.Hsapiens.v86", "beepr"))
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
setRepositories()
install.packages(c("rhdf5", "tidyverse", "tximport", "ensembldb", "EnsDb.Hsapiens.v86", "beepr"))
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
setRepositories()
install.packages(c("rhdf5", "tidyverse", "tximport", "ensembldb", "EnsDb.Hsapiens.v86", "beepr"))
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
setRepositories()
install.packages(c("rhdf5", "tidyverse", "tximport", "ensembldb", "EnsDb.Hsapiens.v86", "beepr"))
install.packages("datapasta")
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
install.packages("ggplot2")
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(dplyr)
library(ggplot2)
library(tibble)
library(tidyr)
library(readr)
library(purrr)
library(stringr)
library(forcats)
library(ggplot2)
install.packages("colorspace")
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(datapasta) #paste data into R from clipboard
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
View(targets)
# you can easily create file paths to the abundance files generated by Kallisto using the 'file.path' function
path <- file.path(targets$sample, "abundance.tsv") # set file paths to your mapped data.
path
# now check to make sure this path is correct by seeing if the files exist
all(file.exists(path))
# get annotations using organism-specific package ----
Tx <- transcripts(EnsDb.Hsapiens.v86, columns=c("tx_id", "gene_name"))
Tx <- as_tibble(Tx)
View(Tx)
#need to change first column name to 'target_id'
Tx <- dplyr::rename(Tx, target_id = tx_id)
View(Tx)
#transcrip ID needs to be the first column in the dataframe
Tx <- dplyr::select(Tx, "target_id", "gene_name")
# import Kallisto transcript counts into R using Tximport ----
# copy the abundance files to the working directory and rename so that each sample has a unique name
Txi_gene <- tximport(path,
type = "kallisto",
tx2gene = Tx,
txOut = FALSE, #How does the result change if this =FALSE vs =TRUE? true is transcript, false is gene level
countsFromAbundance = "lengthScaledTPM",
ignoreTxVersion = TRUE)
beep(sound = 6)
beep(sound = 6)
beep(sound = 6)
beep(sound = 6)
beep(sound = 6)
beep(sound = 7)
beep(sound = 20)
beep(sound = 11)
beep(sound = 11)
#take a look at the type of object you just created
class(Txi_gene)
names(Txi_gene)
print("Step 1 complete!")
beep(sound = 24)
beep(sound = 19)
beep(sound = 18)
beep(sound = 17)
beep(sound = 16)
beep(sound = 16)
beep(sound = 15)
beep(sound = 14)
beep(sound = 13)
beep(sound = 12)
beep(sound = 10)
beep(sound = 9)
beep(sound = 8)
beep(sound = 7)
beep(sound = 6)
beep(sound = 5)
beep(sound = 4)
beep(sound = 3)
beep(sound = 2)
beep(sound = 1)
beep(sound = 8)
